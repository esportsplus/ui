@use '/lib';
@use '/tokens';
@use 'check' as check;
@use 'normalize';
@use 'range' as range;
@use 'text' as text;
@use 'variables';

.field {
    display: flex;
    flex-flow: column;
    gap: var(--margin-vertical) var(--margin-horizontal);
    position: relative;
    transition:
        background var(--transition-duration) ease-in-out,
        border-color var(--transition-duration) ease-in-out,
        box-shadow var(--transition-duration) ease-in-out,
        color var(--transition-duration) ease-in-out,
        opacity var(--transition-duration) ease-in-out;
    width: var(--width);
    z-index: 1;

    @include tokens.state(hover) {
        z-index: 8;
    }

    @include tokens.state(active) {
        z-index: 9;
    }


    &-description,
    &-error,
    &-title {
        color: var(--color);
        font-size: var(--font-size);
        position: relative;
        width: 100%;
        word-wrap: break-word;

        &:empty {
            height: 0px;
            margin: 0;
        }
    }

    &-error {
        animation: fieldError 0.32s 1 linear;

        @keyframes fieldError {
            0% {
                transform: translate(8px);
            }

            20% {
                transform: translate(-8px);
            }

            40% {
                transform: translate(4px);
            }

            60% {
                transform: translate(-4px);
            }

            80% {
                transform: translate(2px);
            }

            100% {
                transform: translate(0px);
            }
        }
    }

    &-mask {
        // Pseudo Element Box Shadow
        &::after {
            @include lib.position(absolute, full);
            border-radius: inherit;
            box-shadow: var(--box-shadow);
            content: '';
            pointer-events: none;
            transition:
                box-shadow var(--transition-duration) ease-in-out,
                opacity var(--transition-duration) ease-in-out,
                transform var(--transition-duration) ease-in-out;
            z-index: -1;
        }

        &--flat {
            &::after {
                display: none;
            }
        }

        &--outline {
            &::before {
                @include lib.position(absolute, full);
                box-shadow: 0 0 0 var(--outline-width) var(--border-color);
                border-radius: var(--border-radius);
                content: '';
                opacity: var(--outline-opacity);
                pointer-events: none;
                transition:
                    box-shadow var(--transition-duration) ease-in-out,
                    opacity var(--transition-duration) ease-in-out;
                z-index: 1;
            }
        }

        &-tag {
            &--hidden {
                @include lib.position(absolute, 0 null null 0);
                appearance: none;
                height: 0px;
                opacity: 0;
                pointer-events: none;
                width: 0px;
                z-index: -1;
            }
        }
    }

    &-required {
        background: var(--background);
        border-radius: var(--border-radius);
        height: var(--size);
        width: var(--size);
    }

    &-title {
        font-weight: var(--font-weight);
        z-index: 1;
    }


    @include check.css();
    @include range.css();
    @include text.css();
}